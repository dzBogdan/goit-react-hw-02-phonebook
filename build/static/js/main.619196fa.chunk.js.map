{"version":3,"sources":["component/Statistics.js","component/feedback.js","reportWebVitals.js","index.js"],"names":["Statistics","props","good","neutral","bad","total","feedback","Feedback","state","hendeleGood","setState","prevStat","hendeleNeutral","hendeleBad","type","className","onClick","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAAe,SAASA,EAAWC,GAC/B,OACI,gCACA,8FACA,qDAAuB,+BAAOA,EAAMC,UACpC,qDAAuB,+BAAOD,EAAME,aACpC,qDAAuB,+BAAOF,EAAMG,SACpC,qDAAuB,+BAAOH,EAAMI,WACpC,qDAAuB,iCAAOJ,EAAMK,SAAb,c,IC2DhBC,E,4MA9DXC,MAAQ,CACJN,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAM,EACNC,SAAS,G,EAGXG,YAAc,WAEV,EAAKC,UAAS,SAAAC,GACV,MAAO,CAACT,KAAMS,EAAST,KAAK,EACpBG,MAAMM,EAASN,MAAM,EACrBC,SAAUK,EAAST,KAAKS,EAASN,MAAO,S,EAMxDO,eAAiB,WACf,EAAKF,UAAS,SAAAC,GACV,MAAO,CAACR,QAASQ,EAASR,QAAQ,EAC1BE,MAAMM,EAASN,MAAM,EACrBC,SAAUK,EAAST,KAAKS,EAASN,MAAO,S,EAMtDQ,WAAa,WACX,EAAKH,UAAS,SAAAC,GACV,MAAO,CAACP,IAAKO,EAASP,IAAI,EAClBC,MAAMM,EAASN,MAAM,EACrBC,SAAUK,EAAST,KAAKS,EAASN,MAAO,S,uDAOvD,OACI,gCACI,uHACA,wBAAQS,KAAK,SAASC,UAAU,SAASC,QAASC,KAAKR,YAAvD,kBACA,wBAAQK,KAAK,SAASC,UAAU,SAASC,QAASC,KAAKL,eAAvD,sBACA,wBAAQE,KAAK,SAASC,UAAU,SAASC,QAASC,KAAKJ,WAAvD,iBACiB,GAAlBI,KAAKT,MAAMH,MACX,cAACL,EAAD,CACCE,KAAQe,KAAKT,MAAMN,KACnBC,QAAWc,KAAKT,MAAML,QACtBC,IAAOa,KAAKT,MAAMJ,IAClBC,MAASY,KAAKT,MAAMH,MACpBC,SAAYW,KAAKT,MAAMF,WACpB,uH,GAtDOY,IAAMC,WCQdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.619196fa.chunk.js","sourcesContent":["export default function Statistics(props){\r\n    return(  \r\n        <div>\r\n        <h2>Статистика</h2>\r\n        <p>Good:               <span>{props.good}</span></p>\r\n        <p>Neutral:            <span>{props.neutral}</span></p>\r\n        <p>Bad:                <span>{props.bad}</span></p>\r\n        <p>Total:              <span>{props.total}</span></p>\r\n        <p>Positiv feedback    <span>{props.feedback} %</span></p>\r\n        </div>\r\n                );\r\n}","import React from 'react';\r\nimport './feedback.moduls.css';\r\nimport Statistics from './Statistics';\r\n\r\nclass Feedback extends React.Component{\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0,\r\n        total:0,\r\n        feedback:0\r\n      }\r\n\r\n      hendeleGood = () => {\r\n          \r\n          this.setState(prevStat =>{\r\n              return {good: prevStat.good+1,\r\n                      total:prevStat.total+1,\r\n                      feedback:(prevStat.good/prevStat.total)*100\r\n                   }\r\n          })\r\n\r\n      }\r\n\r\n      hendeleNeutral = ()  => {\r\n        this.setState(prevStat =>{\r\n            return {neutral: prevStat.neutral+1,\r\n                    total:prevStat.total+1,\r\n                    feedback:(prevStat.good/prevStat.total)*100\r\n                }\r\n        })\r\n\r\n      }      \r\n\r\n      hendeleBad = () => {\r\n        this.setState(prevStat =>{\r\n            return {bad: prevStat.bad+1,\r\n                    total:prevStat.total+1,\r\n                    feedback:(prevStat.good/prevStat.total)*100 \r\n                }\r\n        })\r\n\r\n      }\r\n\r\n    render(){\r\n     return(\r\n         <div>\r\n             <h2>Отзывы клиентов</h2>\r\n             <button type=\"button\" className=\"button\" onClick={this.hendeleGood}>Good</button>\r\n             <button type=\"button\" className=\"button\" onClick={this.hendeleNeutral}> Neutral</button>\r\n             <button type=\"button\" className=\"button\" onClick={this.hendeleBad}>Bad</button>\r\n           {this.state.total!=0? \r\n            <Statistics \r\n             good = {this.state.good}\r\n             neutral = {this.state.neutral}\r\n             bad = {this.state.bad}\r\n             total = {this.state.total}\r\n             feedback = {this.state.feedback}\r\n             />:<p>Нет статистики</p>}\r\n         </div> \r\n        \r\n         \r\n\r\n     )   \r\n    }\r\n}\r\n\r\nexport default Feedback;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/feedback';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}